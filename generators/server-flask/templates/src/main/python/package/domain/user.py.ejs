<%#
 Copyright 2022 the original author or authors from the PyHipster project.

 This file is part of the PyHipster project, see https://github.com/sudeephazra/generator-pyhipster
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import json
from typing import List
import jsonpickle

db = SQLAlchemy()


class <%= asEntity('User') %>(db.Model):
    __tablename__ = "<%= user.entityTableName %>"
    id = db.Column(db.Integer, primary_key=True)
    login = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(80), unique=True, nullable=False)
    firstName = db.Column(db.String(80), unique=True, nullable=False)
    lastName = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    activated = db.Column(db.Boolean, unique=True, nullable=False)
    langKey = db.Column(db.String(80), unique=True, nullable=False)
    imageUrl = db.Column(db.String(80), unique=True, nullable=True)
    activationKey = db.Column(db.String(80), unique=True, nullable=True)
    resetKey = db.Column(db.String(80), unique=True, nullable=True)
    resetDate = db.Column(db.DateTime, unique=True, nullable=False)

    def set_id(self, _id):
        self.id = _id

    def get_id(self):
        return self.id

    def set_login(self, _login):
        self.login = _login

    def get_login(self):
        return self.login
        
    def set_password(self, _password):
        self.password = _password

    def get_password(self):
        return self.password

    def set_first_name(self, _firstName):
        self.firstName = _firstName
        
    def get_first_name(self):
        return self.firstName

    def set_last_name(self, _lastName):
        self.lastName = _lastName
        
    def get_last_name(self):
        return self.lastName

    def set_email(self, _email):
        self.email = _email
        
    def get_email(self):
        return self.email

    def set_activated(self, _activated):
        self.activated = _activated
        
    def get_activated(self):
        return self.activated

    def set_lang_key(self, _langKey):
        self.langKey = _langKey
        
    def get_lang_key(self):
        return self.langKey

    def set_image_url(self, _imageUrl):
        self.imageUrl = _imageUrl
        
    def get_image_url(self):
        return self.imageUrl

    def set_activation_key(self, _activationKey):
        self.activationKey = _activationKey
        
    def get_activation_key(self):
        return self.activationKey

    def set_reset_key(self, _resetKey):
        self.resetKey = _resetKey
        
    def get_reset_key(self):
        return self.resetKey

    def set_reset_date(self, _resetDate):
        self.resetDate = _resetDate
        
    def get_reset_date(self):
        return self.resetDate
        
    def __repr__(self):
        return '<User %r>' % self.login

    @classmethod
    def get_by_id(cls, id) -> "User":
        user = cls.query.filter_by(id=id).first()
        return jsonpickle.encode(user)

    @classmethod
    def get_by_email(cls, email) -> "User":
        user = cls.query.filter_by(email=email).first()
        return jsonpickle.encode(user)

    @classmethod
    def get_by_login(cls, login) -> "User":
        user = cls.query.filter_by(login=login).first()
        return jsonpickle.encode(user)

    @classmethod
    def get_all_users(cls) -> List["User"]:
        user_list = cls.query.all()
        return jsonpickle.encode(user_list)

    def to_dict(self):
        cls_dict = {'_id': self.id, 'login': self.login, 'email': self.email, 'firstName': self.firstName,
                    'lastName': self.lastName, 'activated': self.activated, 'langKey': self.langKey,
                    'imageUrl': self.imageUrl}
        return cls_dict

    def to_json(self):
        return self.to_dict()
        
        