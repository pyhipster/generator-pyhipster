<%#
 Copyright 2022 the original author or authors from the PyHipster project.

 This file is part of the PyHipster project, see https://github.com/pyhipster/generator-pyhipster
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
from flask import current_app
from flask_restx import Resource, Namespace
from security.SecurityUtils import has_role
from security.AuthoritiesConstants import AuthoritiesConstants
import logging, os


logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')


app_management_ns = Namespace('management', path="/management")


class AppManagementInfoResource(Resource):
    def get(self):
        return {
            "display-ribbon-on-profiles": "dev",
            "activeProfiles": ["dev"],
        }, 200

<%_ if (withAdminUi) { _%>
class AppManagementConfigurationResource(Resource):
    @has_role(AuthoritiesConstants.ADMIN)
    def get(self):
        flask_config = current_app.config
        config_vars = (
            "ENV", 
            <%_ if (authenticationTypeJwt) { _%>
            "JWT_ALGORITHM",
            <%_ } _%>
            "SQLALCHEMY_DATABASE_URI",
            "SQLALCHEMY_TRACK_MODIFICATIONS",
            "PROPAGATE_EXCEPTIONS",
            "SQLALCHEMY_EXPIRE_ON_COMMIT",
            "MAIL_SERVER",
            "MAIL_PORT",
            "MAIL_USERNAME",
            "MAIL_USE_TLS",
            "MAIL_USE_SSL",
            <%_ if (!cacheProviderNo) { _%>
            "CACHE_TYPE",
            "CACHE_DEFAULT_TIMEOUT",
            "CACHE_IGNORE_ERRORS",
            <%_ } _%>
            <%_ if (cacheProviderFileSystem) { _%> 
            "CACHE_DIR",
            <%_ } else if (cacheProviderMemcached) { _%>
            "CACHE_MEMCACHED_SERVERS",
            <%_ } else if (cacheProviderRedis) { _%>
            "CACHE_KEY_PREFIX",
            "CACHE_REDIS_HOST",
            "CACHE_REDIS_PORT",
            "CACHE_REDIS_DB",
            "CACHE_REDIS_URL",
            <%_ } _%>
        )
        flask_config_variables = {}
        flask_config_variables["contexts"] = {}
        flask_config_variables["contexts"]["<%= baseName %>"] = {}
        flask_config_variables["contexts"]["<%= baseName %>"]["beans"] = {}
        for var in config_vars:
            config_dict = {"prefix": var, "properties": {var: str(flask_config[var])}}
            flask_config_variables["contexts"]["<%= baseName %>"]["beans"][var] = config_dict
        return flask_config_variables, 200


class AppManagementEnvironmentResource(Resource):
    @has_role(AuthoritiesConstants.ADMIN)
    def get(self):
        env_variables = []
        for k, v in os.environ.items():
            # env_variables[k] = v
            env_property_dict = { "name": str(k), "properties": {str(k): {"value": str(v) }}}
            env_variables.append(env_property_dict)
        return { 
            "activeProfiles": ["dev"],
            "propertySources": env_variables 
        }, 200
<%_ } _%>