<%#
 Copyright 2022 the original author or authors from the PyHipster project.

 This file is part of the PyHipster project, see https://github.com/sudeephazra/generator-pyhipster
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
from flask_restx import Namespace, Resource
import logging
from flask import request, session
from flask_jwt_extended import create_access_token
from domain.User import User
import bcrypt
from datetime import timedelta


logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')


jwt_authentication_ns = Namespace('user-jwt-controller', path="/authenticate")


class UserJWTResource(Resource):
    def post(self):
        logging.info("GET request received on UserJWTResource")
        username = request.json.get("username", None)
        password = request.json.get("password", None)
        remember_me = request.json.get("rememberMe", False)
        # Check if user exists and only then proceed
        user = User.get_by_login(username)
        if not user:
            return {"message": "Invalid user name"}, 404
        if bcrypt.checkpw(password.encode('utf8'), user.password_hash.encode('utf8')) is not True:
            return {"message": "Invalid user name and/or password"}, 401
        token_expiry = timedelta(hours=3)
        if remember_me:
            token_expiry = timedelta(hours=24)
        # Get the role from the DB
        user_roles = []
        for role in user.roles:
            user_roles.append(role.name)
        auth = ",".join(user_roles)
        authorizations = {"auth": auth}
        # Generate the JWT based on the above parameters
        access_token = 'Bearer ' + create_access_token(identity=username, expires_delta=token_expiry, additional_claims=authorizations)
        return {"id_token": access_token}, 200, {'Authorization': access_token}

