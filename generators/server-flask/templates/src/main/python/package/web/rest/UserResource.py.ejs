<%#
 Copyright 2022 the original author or authors from the PyHipster project.

 This file is part of the PyHipster project, see https://github.com/pyhipster/generator-pyhipster
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
from flask_restx import Resource, fields, Namespace
from domain.User import User
from schema.UserSchema import AdminUserSchema
import logging
from flask import request, session
<%_ if (authenticationTypeJwt) { _%>
from flask_jwt_extended import jwt_required, get_jwt_identity
<%_ } else if (authenticationTypeSession) { _%>
from flask_login import login_required, current_user as logged_in_user
<%_ } _%>
from datetime import datetime, timezone
from sqlalchemy.exc import SQLAlchemyError
from marshmallow.exceptions import ValidationError
from security.AuthoritiesConstants import AuthoritiesConstants
from MailConfiguration import send_activation_mail, send_creation_mail
import json
import string
import secrets
<%_ if (!cacheProviderNo) { _%>
from CacheConfiguration import cache
<%_ } _%>


logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')


def generate_activation_reset_keys():
    alphabet = string.ascii_letters + string.digits
    password = ''.join(secrets.choice(alphabet) for i in range(20))
    return password


user_list_ns = Namespace('user-resource', path="/admin/users")

user_schema = AdminUserSchema()
user_list_schema = AdminUserSchema(many=True)


class UserResource(Resource):
    <%_ if (authenticationTypeJwt) { _%>
    @jwt_required()
    <%_ } else if (authenticationTypeSession) { _%>
    @login_required
    <%_ } _%>
    def get(self, login):
        logging.info("GET request received on UserResource")
        users = User.get_by_login(login)
        if users is None:
            return {"message": "User not found"}, 404
        return user_schema.dump(users), 200


    <%_ if (authenticationTypeJwt) { _%>
    @jwt_required()
    <%_ } else if (authenticationTypeSession) { _%>
    @login_required
    <%_ } _%>
    def delete(self, login):
        logging.info("DELETE request received on UserResource")
        users = User.get_by_login(login)
        if users is None:
            return {"message": "User not found"}, 404
        try:
            users.delete_from_db()
        except SQLAlchemyError as e:
            return {"message": str(e.__dict__['orig'])}, 400
        <%_ if (!cacheProviderNo) { _%>
        cache.delete('all_users')
        <%_ } _%>
        return {"message": "User deleted"}, 204


class UserResourceList(Resource):
    <%_ if (authenticationTypeJwt) { _%>
    @jwt_required()
    <%_ } else if (authenticationTypeSession) { _%>
    @login_required
    <%_ } _%>
    def get(self):
        logging.info("GET request received on UserResourceList")
        <%_ if (!cacheProviderNo) { _%>
        users = cache.get('all_users')
        if users == None:
            users = User.get_all_users()
            cache.set('all_users', users)
        <%_ } else { _%>
        users = User.get_all_users()
        <%_ } _%>
        return user_list_schema.dump(users), 200

    <%_ if (authenticationTypeJwt) { _%>
    @jwt_required()
    <%_ } else if (authenticationTypeSession) { _%>
    @login_required
    <%_ } _%>
    def post(self):
        logging.info("POST request received on UserResourceList")
        user_json = request.get_json()
        if 'id' in user_json:
            del user_json['id']
        user_json['langKey'] = '<%= nativeLanguage %>'
        <%_ if (authenticationTypeJwt) { _%>
        user_json['createdBy'] = get_jwt_identity()
        <%_ } else if (authenticationTypeSession) { _%>
        user_json['createdBy'] = logged_in_user.login
        <%_ } _%>
        user_json['createdDate'] = str(datetime.now(timezone.utc))
        <%_ if (authenticationTypeJwt) { _%>
        user_json['lastModifiedBy'] = get_jwt_identity()
        <%_ } else if (authenticationTypeSession) { _%>
        user_json['lastModifiedBy'] = logged_in_user.login
        <%_ } _%>
        user_json['lastModifiedDate'] = str(datetime.now(timezone.utc))
        if not user_json['authorities']:
            user_json['authorities'] = [AuthoritiesConstants.USER]
        users = User()
        try:
            user_data = user_schema.load(user_json, instance=users)
        except ValidationError as err:
            return {"message": json.dumps(err.messages)}, 400
        activation_key = generate_activation_reset_keys()
        user_data.set_activation_key(activation_key)
        try:
            user_data.save_to_db()
        except SQLAlchemyError as e:
            return {"message": str(e.__dict__['orig'])}, 400
        <%_ if (!cacheProviderNo) { _%>
        cache.delete('all_users')
        <%_ } _%>

        # Send registration mail
        try:
            send_creation_mail(user_data)
        except:
            return {"message": "User is created but unable to send mail"}, 200
        return user_schema.dump(user_data), 201

    <%_ if (authenticationTypeJwt) { _%>
    @jwt_required()
    <%_ } else if (authenticationTypeSession) { _%>
    @login_required
    <%_ } _%>
    def put(self):
        logging.info("PUT request received on UserResourceList")
        <%_ if (authenticationTypeJwt) { _%>
        login = get_jwt_identity()
        <%_ } else if (authenticationTypeSession) { _%>
        login = logged_in_user.login
        <%_ } _%>
        user_json = request.get_json()
        if user_json["login"] is None:
            return {"message": "Invalid User"}, 400
        users = User.get_by_login(user_json["login"])
        if users.get_login() is None:
            return {"message": "Invalid User"}, 400
        try:
            updated_user = user_schema.load(user_json, instance=users)
        except ValidationError as err:
            return {"message": json.dumps(err.messages)}, 400
        updated_user.set_last_modified_by(login)
        updated_user.set_last_modified_date(datetime.now(timezone.utc))
        try:
            updated_user.save_to_db()
        except SQLAlchemyError as e:
            return {"message": str(e.__dict__['orig'])}, 400
        <%_ if (!cacheProviderNo) { _%>
        cache.delete('all_users')
        <%_ } _%>
        return user_schema.dump(updated_user), 200
