<%#
 Copyright 2022 the original author or authors from the PyHipster project.

 This file is part of the PyHipster project, see https://github.com/pyhipster/generator-pyhipster
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import logging
from DatabaseConfig import db
from pathlib import Path
import pandas as pd


def load_fake_data(app):
    with app.app_context():
        <%_ if (authenticationTypeJwt || authenticationTypeSession) { _%>
        default_fake_data = Path(__file__).resolve().parents[2] / "resources" / "config" / "liquibase" / "data"
        <%_ } _%>
        user_fake_data = Path(__file__).resolve().parents[2] / "resources" / "config" / "liquibase" / "fake-data"

        data_load_object = [
            <%_ if (authenticationTypeJwt || authenticationTypeSession) { _%>
            {"table": "jhi_user", "file": "user.csv", "file_location": default_fake_data},
            {"table": "jhi_authority", "file": "authority.csv", "file_location": default_fake_data},
            {"table": "jhi_user_authority", "file": "user_authority.csv", "file_location": default_fake_data},
            <%_ } _%>
            # pyhipster-needle-user-defined-model-fake-data
        ]

        for data_load in data_load_object:
            logging.info("Checking data load for " + data_load["table"])
            <%_ if (databaseTypePostgres || databaseTypeCockroach) { _%>
            result = db.session.execute("SELECT count(1) FROM \"" + data_load["table"] + "\"").scalar()
            <%_ } else { _%>
            result = db.session.execute("SELECT count(1) FROM " + data_load["table"]).scalar()
            <%_ } _%>

            if result < 1:
                data_file = data_load["file_location"] / data_load["file"]
                if data_file.is_file():
                    # Load data only if the table exists, and is empty and the corresponding file is available
                    print("Loading data file " + str(data_file) + " to table " + str(data_load["table"]))
                    df = pd.read_csv(data_file, delimiter=";", header=0)
                    <%_ if (databaseTypeMssql) { _%>
                    df = df.drop([x for x in ['id'] if x in df.columns], axis=1)
                    <%_ } _%>
                    df.to_sql(data_load["table"], con=db.get_engine(), if_exists="append", index=False)
                    <%_ if (databaseTypePostgres || databaseTypeCockroach) { _%>
                    if data_load["table"] not in ['jhi_authority', 'jhi_user_authority']:
                        seq_result = db.session.execute("SELECT setval('public.\"" + data_load["table"] + "_id_seq\"', 10, true)")
                    <%_ } _%>    
            else:
                logging.info(data_load["table"] + " is already populated. Skipping fake data load...")