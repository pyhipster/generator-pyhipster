<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
 This is a fragment root file, it will be merge fragments if available.
 EJS fragments will process % delimiter tags in template rendering and & delimiter tags in the merge process.
-%>
<&_
 // Register sections and max allowed fragments, 0 for unlimited.
 fragments.registerSections({
   developmentSection: 0,
   productionSection: 0,
   testingSection: 0,
   othersSection: 0,
   referenceSection: 0,
 });
_&>
# <%= baseName %>

<%_
let clientPackageMngrName = 'Npm';
let clientPackageMngrAddGlobal = 'install -g';
let clientPackageMngrAdd = 'install --save --save-exact';
let clientPackageMngrAddDev = 'install --save-dev --save-exact';
let DOCUMENTATION_ARCHIVE_URL = `${DOCUMENTATION_URL}`;
_%>
This application was generated using PyHipster <%= jhipsterVersion %>, you can find documentation and help at [<%= DOCUMENTATION_ARCHIVE_URL %>](<%= DOCUMENTATION_ARCHIVE_URL %>).
<%_ if (applicationTypeGateway || applicationTypeMicroservice) { _%>

This is a "<%= applicationType %>" application intended to be part of a microservice architecture, please refer to the [Doing microservices with JHipster][] page of the documentation for more information.
This application is configured for Service Discovery and Configuration with <% if (serviceDiscoveryEureka) { %>the JHipster-Registry<% } %><% if (serviceDiscoveryConsul) { %>Consul<% } %>. On launch, it will refuse to start if it is not able to connect to <% if (serviceDiscoveryEureka) { %>the JHipster-Registry at [http://localhost:8761](http://localhost:8761)<% } %><% if (serviceDiscoveryConsul) { %>Consul at [http://localhost:8500](http://localhost:8500)<% } %>.<% if (serviceDiscoveryEureka) { %> For more information, read our documentation on [Service Discovery and Configuration with the JHipster-Registry][].<% } %><% if (serviceDiscoveryConsul) { %> For more information, read our documentation on [Service Discovery and Configuration with Consul][].<% } %>
<%_ } _%>

## Project Structure

Node is required for generation and recommended for development. `package.json` is always generated for a better development experience with prettier, commit hooks, scripts and so on.

In the project root, PyHipster generates configuration files for tools like git, prettier, eslint, husk, and others that are well known and you can find references in the web.

<%_ if (configOptions.backendName === 'Python') { %>
`/src/*` structure follows default <%= configOptions.backendName %> structure.
<%_ } _%>
- `.yo-rc.json` - Yeoman configuration file
PyHipster configuration is stored in this file at `generator-pyhipster` key.
- `.pyhipster/*.json` - PyHipster entity configuration files
- `requirements.txt` - PyHipster Python module dependencies

## Development

We use npm scripts and [Webpack](https://webpack.js.org/) as our build system for the UI. The backend build system is powered by Poetry.

Run the following command to create a blissful development experience where your browser auto-refreshes when files change in your project.

```bash
$> npm run pyhipster
```

Npm is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by
specifying a newer version in [package.json](package.json). You can also run `npm update` and `npm install` to manage dependencies.
Add the `help` flag on any command to see how you can use it. For example, `npm help update`.

The `npm run` command will list all of the scripts available to run for this project.

## Testing
PyHipster generates unit and functional test cases for the default user and authority entities at project generation. To run the tests, issue the following command
```bash
$> poetry run pytest
```

## Code Coverage

```bash
$> poetry run coverage
```

## Static Code Analysis

```bash
$> poetry run code_quality_scan
```


## Vulnerability Analysis

```bash
$> poetry run security_scan
```

## Code Formatting (Black)

```bash
$> poetry run code_formatting
```
For further instructions on how to develop with PyHipster, have a look at the documentation.

[PyHipster homepage and latest documentation](<%= DOCUMENTATION_URL %>)
[Python](https://www.python.org/)
[Node.js](https://nodejs.org/)
[Npm](https://www.npmjs.com/)
