<%#
 Copyright 2022 the original author or authors from the PyHipster project.

 This file is part of the PyHipster project, see https://github.com/sudeephazra/generator-pyhipster
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
from marshmallow_sqlalchemy import auto_field, fields
from WebSerializer import ma
from DatabaseConfig import db
from domain.<%= entityClass %> import <%= entityClass %>
<%_ for (relationship of relationships) { _%>
    <%_ if (relationship.ownerSide && (relationship.otherEntity.persistClass !== relationship.entityClass)) { _%>
# Owner side
        <%_ if (relationship.relationshipManyToOne) { _%>
# Owner - Many to One
from schema.<%= relationship.otherEntity.persistClass %>Schema import <%= relationship.otherEntity.persistClass %>Schema
        <%_ } else if (relationship.relationshipOneToMany) { _%>
# Owner - One to Many
        <%_ } else if (relationship.relationshipOneToOne) { _%>
# Owner - One to One with <%= relationship.otherEntityName %>
from schema.<%= relationship.otherEntity.persistClass %>Schema import <%= relationship.otherEntity.persistClass %>Schema
        <%_ } else { _%>
# Owner - Many to Many with <%= relationship.otherEntityName %>
from schema.<%= relationship.otherEntity.persistClass %>Schema import <%= relationship.otherEntity.persistClass %>Schema
        <%_ } _%>
    <%_ } else { _%>
# Not the owner side
        <%_ if (relationship.relationshipOneToMany) { _%>
# Not owner - One to Many
        <%_ } else if (relationship.relationshipManyToOne) { _%>
# Not owner - Many to One
        <%_ } else if (relationship.relationshipOneToOne) { _%>
# Not owner - One to One with <%= relationship.otherEntityName %>
        <%_ } else { _%>
# Not owner - Many to Many with <%= relationship.otherEntityName %>
        <%_ } _%>
    <%_ } _%>
<%_ } _%>


class <%= entityClass %>Schema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = <%= entityClass %>
        load_instance = True
        exclude = (
            <%_ for (const field of fields.filter(field => !field.transient && !field.id && !field.fieldIsEnum && _.lowerCase(field.fieldName).indexOf(' ') >= 0)) { _%>
            "<%= _.replace(_.lowerCase(field.fieldName), new RegExp("\\s","g"), '_') %>", 
            <%_ } _%>
            <%_ for (const field of fields.filter(field => !field.transient && !field.id && field.fieldIsEnum && _.lowerCase(field.fieldName).indexOf(' ') >= 0)) { _%>
            "<%= _.replace(_.lowerCase(field.fieldName), new RegExp("\\s","g"), '_') %>",
            <%_ } _%>
        )
        sqla_session = db.session

    <%_ for (const field of fields.filter(field => !field.transient && !field.id && !field.fieldIsEnum && _.lowerCase(field.fieldName).indexOf(' ') >= 0)) { _%>
    <%= field.fieldName %> = auto_field("<%= _.replace(_.lowerCase(field.fieldName), new RegExp("\\s","g"), '_') %>") 
    <%_ } _%>
    <%_ for (const field of fields.filter(field => !field.transient && !field.id && field.fieldIsEnum && _.lowerCase(field.fieldName).indexOf(' ') >= 0)) { _%>
    <%= field.fieldName %> = auto_field("<%= _.replace(_.lowerCase(field.fieldName), new RegExp("\\s","g"), '_') %>") 
    <%_ } _%>
    <%_ for (relationship of relationships) { _%>
        <%_ if (relationship.ownerSide) { _%>
    # Owner side
            <%_ if (relationship.relationshipManyToOne) { _%>
    # Owner - Many to One
    <%= relationship.otherEntityName %> = fields.Nested("<%= relationship.otherEntity.persistClass %>Schema")
            <%_ } else if (relationship.relationshipOneToMany) { _%>
    # Owner - One to Many
            <%_ } else if (relationship.relationshipOneToOne) { _%>
    # Owner - One to One with <%= relationship.otherEntityName %>
    <%= relationship.otherEntityName %> = fields.Nested("<%= relationship.otherEntity.persistClass %>Schema")
            <%_ } else { _%>
    # Owner - Many to Many with <%= relationship.otherEntityName %>
    <%= relationship.otherEntityNamePlural %> = fields.Nested("<%= relationship.otherEntity.persistClass %>Schema", many=True)
            <%_ } _%>
        <%_ } else { _%>
    # Not the owner side
            <%_ if (relationship.relationshipOneToMany) { _%>
    # Not owner - One to Many
            <%_ } else if (relationship.relationshipManyToOne) { _%>
    # Not owner - Many to One
            <%_ } else if (relationship.relationshipOneToOne) { _%>
    # Not owner - One to One with <%= relationship.otherEntityName %>
            <%_ } else { _%>
    # Not owner - Many to Many with <%= relationship.otherEntityName %>
            <%_ } _%>
        <%_ } _%>
    <%_ } _%>
